generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String?   // Optional if using OAuth
  image     String?
  reviews   Review[]
  cartItems CartItem[]
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  image       String         
  category    String
  images      ProductImage[] 
  reviews     Review[]
  cartItems   CartItem[]   
  orderItems  OrderItem[]   
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?  // Alternative text for accessibility
  order     Int      @default(0) // Order for displaying images
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Order {
  id         String      @id @default(cuid())
  total      Float
  status     String      @default("pending")
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
}